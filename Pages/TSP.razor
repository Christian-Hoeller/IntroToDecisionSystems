@page "/tsp"

@inject HttpClient Http

<h1>TSPSolver</h1>

<p>This component demonstrates fetching data from the server.</p>


@if (specs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form>
        <label>
            TSP specification
            <select class="form-control" @onchange="TSPSpecSelected">
                @foreach (var spec in specs)
                {
                    <option>@spec.Name</option>
                }
            </select>
        </label>
    </form>
    <BECanvas @ref="scene" Width="500" Height="500"></BECanvas>


}


@code {

    public class SerializableTSPSpec
    {
        public string Name { get; set; }
        public int[] OptimalTour { get; set; }
        public SerializableLocation[] Cities { get; set; }

        public static TSPSpec ToDomain(SerializableTSPSpec spec)
        {
            return new TSPSpec(
                spec.Name,
                spec.OptimalTour,
                spec.Cities.Select(SerializableLocation.ToDomain).ToList());
        }



        public override string ToString()
        {
            var coordinates = string.Join(",", (IEnumerable<SerializableLocation>)Cities);
            return $"Name: {Name} Cities({Cities.Length}) OptimalTour{coordinates}";
        }
    }

    TSPSpec[] specs;
    TSPSpec selectedTSPSpec;

    protected override async Task OnInitializedAsync()
    {
        var serverSpecs = await Http.GetJsonAsync<SerializableTSPSpec[]>("sample-data/tspspecs.json");
        Console.WriteLine($"{string.Join(Environment.NewLine, (IEnumerable<SerializableTSPSpec>)serverSpecs)}");
        specs = serverSpecs
            .Select(SerializableTSPSpec.ToDomain)
            .OrderBy(spec => spec.Cities.Count)
            .ToArray();

        selectedTSPSpec = specs.FirstOrDefault();
    }

    public class SerializableLocation
    {
        public double X { get; set; }
        public double Y { get; set; }

        public static Location ToDomain(SerializableLocation location)
        {
            return new Location(location.X, location.Y);
        }

        public override string ToString()
        {
            return $"({X}/{Y})";
        }
    }

    private void TSPSpecSelected(ChangeEventArgs e)
    {
        var specName = (string)e.Value;
        Console.WriteLine($"SelectedSpecname: {specName}");

        selectedTSPSpec = specs.Single(spec => spec.Name == specName);
    }


    BECanvasComponent scene;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (scene == null)
        {
            return;
        }

        var context = await scene.CreateCanvas2DAsync();
        await context.ClearRectAsync(0, 0, scene.Width, scene.Height);



        if (selectedTSPSpec == null)
        {
            return;
        }

        var minX = selectedTSPSpec.Cities
            .Min(location => location.X);

        var maxX = selectedTSPSpec.Cities
            .Max(location => location.X);

        var minY = selectedTSPSpec.Cities
            .Min(location => location.Y);

        var maxY = selectedTSPSpec.Cities
            .Max(location => location.Y);


        Location GetSceneCoordinates(Location city)
        {
            const int padding = 10;

            var xRatio = (scene.Width - 2 * padding) / (maxX - minX);
            var yRatio = (scene.Height - 2 * padding) / (maxY - minY);

            var x = (city.X - minX) * xRatio + padding;
            var y = (city.Y - minY) * yRatio + padding;

            return new Location(x, y);


        }

        foreach(var city in selectedTSPSpec.Cities.Select(GetSceneCoordinates))
        {
            await context.SetFillStyleAsync("orange");

            await context.BeginPathAsync();
            await context.ArcAsync(city.X, city.Y, 3, 0, 2 * Math.PI);
            await context.FillAsync();
        }
    }

}
